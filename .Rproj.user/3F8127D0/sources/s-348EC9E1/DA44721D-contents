---
title: "Crop Classification Accuracy - Turkey"
author: "Enes GENCER"
date: "1/28/2022"
output: html_document
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)

rm(list = ls())
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(rstudioapi) 

```


# Read excel file
```{r}
# Set working directory to current script location
setwd(dirname(getActiveDocumentContext()$path))

# File name
file_name = "TURKEY_TEST_2021_v01.xlsx"

# Read xlsx document
df <- readxl::read_excel(file_name)

city_index <- starts_with(match = "City", vars = colnames(df))
time_index <- starts_with(match = "Pro", vars = colnames(df))

if(colnames(df)[time_index] == "ProcessIdP1"){
  colnames(df)[time_index] <- "ProcessIdP3"
}

if(colnames(df)[city_index] == "CityNameTr"){
  colnames(df)[city_index] <- "CityNameEng"
}  


```



# Tidy the data frame
```{r, fig.dim = c(8, 6)}
df <- df %>% 
  janitor::clean_names() %>% 
  rename(true_value = process_id,
         prediction = majority) %>% 
  select(id, region_name_eng, city_name_eng, true_value, prediction)

df$id = as.numeric(df$id)
df$true_value = as.numeric(df$true_value)
df$prediction = as.numeric(df$prediction)

df <- df %>% 
  mutate(true_value = case_when(true_value == 41 ~ "Wheat",
                                true_value == 12 ~ "Sunflower",
                                true_value == 13 ~ "Pepper",
                                true_value == 14 ~ "Rice",
                                true_value == 15 ~ "Tomato",
                                true_value == 16 ~ "Watermelon",
                                true_value == 17 ~ "Melon",
                                true_value == 18 ~ "Corn",
                                true_value == 19 ~ "Sugarbeet", 
                                true_value == 21 ~ "Alfalfa",
                                true_value == 24 ~ "Cotton",
                                true_value == 25 ~ "Bean",
                                true_value == 28 ~ "Potato",
                                true_value == 32 ~ "Vegetation",
                                true_value == 51 ~ "Canola", 
                                true_value == 52 ~ "Onion",
                                true_value == 56 ~ "Lentil",
                                true_value == 58 ~ "Chickpea",
                                true_value == 62 ~ "Squash",
                                true_value == 66 ~ "Tobacco",
                                true_value == 72 ~ "Vineyard",
                                true_value == 96 ~ "Orchard",
                                true_value == 97 ~ "NotField",
                                true_value == 98 ~ "Other",
                                true_value == 99 ~ "Agricultural_Soil")) %>% 
  mutate(prediction = case_when(prediction == 41 ~ "Wheat",
                                prediction == 12 ~ "Sunflower",
                                prediction == 13 ~ "Pepper",
                                prediction == 14 ~ "Rice",
                                prediction == 15 ~ "Tomato",
                                prediction == 16 ~ "Watermelon",
                                prediction == 17 ~ "Melon",
                                prediction == 18 ~ "Corn",
                                prediction == 19 ~ "Sugarbeet", 
                                prediction == 21 ~ "Alfalfa",
                                prediction == 24 ~ "Cotton",
                                prediction == 25 ~ "Bean",
                                prediction == 28 ~ "Potato",
                                prediction == 32 ~ "Vegetation",
                                prediction == 51 ~ "Canola", 
                                prediction == 52 ~ "Onion",
                                prediction == 56 ~ "Lentil",
                                prediction == 58 ~ "Chickpea",
                                prediction == 62 ~ "Squash",
                                prediction == 66 ~ "Tobacco",
                                prediction == 72 ~ "Vineyard",
                                prediction == 96 ~ "Orchard",
                                prediction == 97 ~ "NotField",
                                prediction == 98 ~ "Other",
                                prediction == 99 ~ "Agricultural_Soil"))

```

# Skim the dataframe
```{r, fig.dim = c(10, 8)}
skimr::skim(df)
ss <- df %>% 
  filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>% 
  count(true_value, sort = TRUE) %>% 
  ggplot(aes(x = reorder(true_value, n), y = n))+
  geom_col(show.legend = NULL, width = 0.4, alpha = 1, fill = "steelblue")+
  theme_pander()+
  coord_flip()+
  labs(y = "Sample Size",
       x = "",
       title = "Test Sample Size in Turkey")
ggplotly(ss)
```

# Get unique crops & cities
```{r}
unique_cities = df$city_name_eng %>% unique
unique_crops = df$prediction %>% unique

```


# Accuracy analysis by crops
```{r, fig.dim = c(10, 8)}
acc_df <- tibble(city = unique_crops, sensitivity = NA, precision = NA)
acc_df$precision = map_dbl(1:length(unique_crops), .f = function(i){ 
                                x <- df %>% 
                                      filter(prediction == unique_crops[i])
                                true_preds <- x %>% 
                                  filter(prediction == true_value) %>% 
                                  nrow()
                                n <- nrow(x)
                                acc <- true_preds/n
                                acc})
acc_df$sensitivity = map_dbl(1:length(unique_crops), .f = function(i){ 
                                x <- df %>% 
                                      filter(true_value == unique_crops[i])
                                true_preds <- x %>% 
                                  filter(prediction == true_value) %>% 
                                  nrow()
                                n <- nrow(x)
                                acc <- true_preds/n
                                acc})

acc_df <- acc_df %>% 
  mutate(f_score = (2*precision*sensitivity)/(precision+sensitivity))

p1 <- acc_df %>% 
  mutate(high = ifelse(f_score > 0.75, TRUE, FALSE)) %>% 
  ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
  geom_col(show.legend = FALSE, alpha = 1, width = 0.4)+
  theme_pander()+
  coord_flip()+
  scale_y_continuous(label = scales::percent)+
  facet_wrap(~high, scales = "free")+
  scale_fill_tableau()+
  labs(y = "Accuracy",
       x = "",
       title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
```

```{r}
library(RColorBrewer)
n <- length(unique_crops)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))

graph <- df %>%
  filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
  count(true_value, sort = TRUE) %>%
  left_join(acc_df %>%
              rename(true_value = city) %>%
              filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")),
            by = "true_value") %>%
  ggplot(aes(x = log(n), y = f_score)) +
  geom_point(
    aes(x = log(n), 
        y = f_score, 
        color = true_value),
    show.legend = NULL,
    alpha = 1,
    size = 2
  ) +
  geom_smooth(se = FALSE, method = "glm", color = "steelblue") +
  theme_classic() +
  scale_color_manual(values = col_vector)+
  labs(y = "Accuracy",
       x = "Log Sample Size",
       title = "Correlation between sample size and prediction accuracy")
ggplotly(graph)
```

# Accuracy analysis by cities
```{r, fig.dim = c(10, 10)}
acc_df <- tibble(city = unique_cities, accuracy = NA)
acc_df$accuracy = map_dbl(1:length(unique_cities), .f = function(i){ 
                                x <- df %>% 
                                      filter(city_name_eng == unique_cities[i])
                                true_preds <- x %>% 
                                  filter(prediction == true_value) %>% 
                                  nrow()
                                n <- nrow(x)
                                acc <- true_preds/n
                                acc})

city_plot <- acc_df %>% 
  mutate(high = ifelse(accuracy > 0.75, TRUE, FALSE)) %>% 
  ggplot(aes(x = reorder(city, accuracy), y = accuracy, fill = high))+
  geom_col(show.legend = NULL, width = 0.4, alpha = 1)+
  theme_pander()+
  coord_flip()+
  scale_y_continuous(label = scales::percent)+
  facet_wrap(~high, scales = "free")+
  labs(y = "Accuracy",
       x = "",
       title = "")
ggplotly(city_plot, width = 1000)
```

# Overall Statistics
```{r, fig.dim = c(10, 8)}
library(caret)
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique

res <- caret::confusionMatrix(factor(df$true_value, unique_all), 
                              factor(df$prediction, unique_all))
res
```

# Confusion Matrix

A confusion matrix is a summary of prediction results on a classification problem.
The number of correct and incorrect predictions are summarized with count values and broken down by each class. This is the key to the confusion matrix.

```{r, fig.dim = c(10, 8)}
library(caret)
unique_all <- unique_all[1:22]

df_factor <- df %>% 
  filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>% 
  filter(!prediction %in% c("Agricultural_Soil", "Other", "NotField")) %>% 
  mutate(true_value = factor(true_value, unique_all)) %>% 
  mutate(prediction = factor(prediction, unique_all))

p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")
ggplotly(p2)