scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 1, width = 0.4)+
theme_calc()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 1, width = 0.4)+
theme_clean()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 1, width = 0.4)+
theme_bw()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 1, width = 0.4)+
theme_base()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 1, width = 0.4)+
theme_par()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 1, width = 0.4)+
theme_economist_white()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 1, width = 0.4)+
theme_minimal()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_tableau()+
labs(y = "Accuracy",
x = "",
title = "Prediction Accuracy (F-Score)")
ggplotly(p1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
rm(list = ls())
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(rstudioapi)
library(caret)
uniqe_true <- df$true_value %>% unique
library(caret)
uniqe_true <- df$true_value %>% unique
load("~/crop-classification-accuracy/processed_data/df.RDS")
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique
res <- caret::confusionMatrix(factor(df$true_value, unique_all),
factor(df$prediction, unique_all))
res
res$overall
res$overall[1]
accuracy <- as.numeric(res$overall[1])
accuracy <- round(as.numeric(res$overall[1]),1)
valueBox(accuracy)
confMatPlot = function(confMat, titleMy, shouldPlot = T) {
#' Function for plotting confusion matrice
#'
#' @param confMat: confusion matrix with counts, ie integers.
#' Fractions won't work
#' @param titleMy: String containing plot title
#' @return Nothing: It only plots
## Prepare data
x.orig = confMat; rm(confMat)  # Lazy conversion to function internal variable name
n = nrow(x.orig)  # conf mat is square by definition, so nrow(x) == ncol(x)
opar <- par(mar = c(5.1, 8, 3, 2))
x <- x.orig
x <- log(x + 0.5)  # x<1 -> x<0 ,  x>=1 -> x>0
x[x < 0] <- NA
diag(x) <- -diag(x)  # change sign to give diagonal different color
## Plot confusion matrix
image(1:n, 1:n,  # grid of coloured boxes
# matrix giving color values for the boxes
# t() and [,ncol(x):1] since image puts [1,1] in bottom left by default
-t(x)[, n:1],
# ylab added later to avoid overlap with tick labels
xlab = 'Actual', ylab = '',
col = colorRampPalette(c("darkorange3", "white", "steelblue"),
bias = 1.65)(100),
xaxt = 'n', yaxt = 'n'
)
# Plot counts
text(rep(1:n, each = n), rep(n:1, times = n),
labels = sub('^0$', '', round(c(x.orig), 0)))
# Axis ticks but no lables
axis(1, at = 1:n, labels = rep("", n), cex.axis = 0.8)
axis(2, at = n:1, labels = rep("", n), cex.axis = 0.8)
# Tilted axis lables
text(cex = 0.8, x = (1:n), y = -0.1, colnames(x), xpd = T, srt = 30, adj = 1)
text(cex = 0.8, y = (n:1), x = +0.1, colnames(x), xpd = T, srt = 30, adj = 1)
title(main = titleMy)
title(ylab = 'Predicted', line = 6)
# Grid and box
abline(h = 0:n + 0.5, col = 'gray')
abline(v = 0:n + 0.5, col = 'gray')
box(lwd = 1, col = 'gray')
par(opar)
}
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique
unique_all <- unique_all[1:22]
df_factor <- df %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
filter(!prediction %in% c("Agricultural_Soil", "Other", "NotField")) %>%
mutate(true_value = factor(true_value, unique_all)) %>%
mutate(prediction = factor(prediction, unique_all))
confMatPlot(yardstick::conf_mat(df_factor, true_value, prediction))
confMatPlot(yardstick::conf_mat(df_factor, true_value, prediction), titleMy = "Plot")
yardstick::conf_mat(df_factor, true_value, prediction)
autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap") +
scale_fill_gradient()
autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap") +
scale_fill_continuous_tableau()
autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_brewer()
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_continuous_tableau()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_color_continuous_tableau()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_continuous()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_continuous_tableau()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction))+
scale_fill_continuous_tableau()
ggplotly(p2)
autoplot(yardstick::conf_mat(df_factor, true_value, prediction))+
scale_fill_continuous_tableau()
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_continuous_tableau()
ggplotly(p2)
res$table
table(res$table)
res$overall
kappa <- res$overall[2]
yardstick::f_meas_vec(df_factor$true_value, df_factor$prediction)
res$overall[1]
as.numeric(res$overall[1]) * 100
yardstick::accuracy_vec(df_factor$true_value, df_factor$prediction)
yardstick::bal_accuracy_vec(df_factor$true_value, df_factor$prediction)
yardstick::kap_vec(df_factor$true_value, df_factor$prediction)
yardstick::sens_vec(df_factor$true_value, df_factor$prediction)
yardstick::specificity_vec(df_factor$true_value, df_factor$prediction)
0.8051424 + 0.9933144
(0.8051424 + 0.9933144)/2
library(caret)
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique
unique_all <- unique_all[1:22]
df_factor <- df %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
filter(!prediction %in% c("Agricultural_Soil", "Other", "NotField")) %>%
mutate(true_value = factor(true_value, unique_all)) %>%
mutate(prediction = factor(prediction, unique_all))
res <- caret::confusionMatrix(factor(df$true_value, unique_all),
factor(df$prediction, unique_all))
accuracy <- round(as.numeric(res$overall[1]) * 100,1)
accuracy
library(caret)
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique
df_factor <- df %>%
#filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
#filter(!prediction %in% c("Agricultural_Soil", "Other", "NotField")) %>%
mutate(true_value = factor(true_value, unique_all)) %>%
mutate(prediction = factor(prediction, unique_all))
res <- caret::confusionMatrix(factor(df$true_value, unique_all),
factor(df$prediction, unique_all))
accuracy <- round(as.numeric(res$overall[1]) * 100,1)
accuracy
yardstick::sensitivity(df_factor$true_value, df_factor$prediction)
yardstick::sensitivity_vec(df_factor$true_value, df_factor$prediction)
yardstick::precision_vec_vec(df_factor$true_value, df_factor$prediction)
yardstick::precision_vec(df_factor$true_value, df_factor$prediction)
library(caret)
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique
unique_all <- unique_all[1:22]
df_factor <- df %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
filter(!prediction %in% c("Agricultural_Soil", "Other", "NotField")) %>%
mutate(true_value = factor(true_value, unique_all)) %>%
mutate(prediction = factor(prediction, unique_all))
yardstick::precision_vec(df_factor$true_value, df_factor$prediction)
yardstick::precision_vec(df_factor$true_value, df_factor$prediction)
yardstick::f_meas_vec(df_factor$true_value, df_factor$prediction)
x = yardstick::precision_vec(df_factor$true_value, df_factor$prediction)
x = yardstick::sensitivity_vec(df_factor$true_value, df_factor$prediction)
y = yardstick::precision_vec(df_factor$true_value, df_factor$prediction)
2 * (x*y/(x+y))
y = yardstick::precision_vec(df_factor$true_value, df_factor$prediction, estimator = "macro_weghted")
y = yardstick::precision_vec(df_factor$true_value, df_factor$prediction, estimator = "macro_weighted")
y
yardstick::f_meas_vec(df_factor$true_value, df_factor$prediction, estimator = "macro_weighted")
yardstick::f_meas_vec(df_factor$true_value, df_factor$prediction, estimator = "micro")
library(caret)
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique
unique_all <- unique_all[1:22]
df_factor <- df %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
filter(!prediction %in% c("Agricultural_Soil", "Other", "NotField")) %>%
mutate(true_value = factor(true_value, unique_all)) %>%
mutate(prediction = factor(prediction, unique_all))
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_continuous()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_gradient()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_gradient_tableau()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_gradient2_tableau()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_gradientn()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_grey()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_canva()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_gradient()
ggplotly(p2)
p2 <- autoplot(yardstick::conf_mat(df_factor, true_value, prediction), type = "heatmap")+
scale_fill_continuous_tableau()
ggplotly(p2)
library(caret)
uniqe_true <- df$true_value %>% unique
unique_pred <- df$prediction %>% unique
unique_all <- c(uniqe_true, unique_pred) %>% unique
unique_all <- unique_all[1:22]
df_factor <- df %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
filter(!prediction %in% c("Agricultural_Soil", "Other", "NotField")) %>%
mutate(true_value = factor(true_value, unique_all)) %>%
mutate(prediction = factor(prediction, unique_all))
conf_matrix <- conf_mat(df_factor, true_value, prediction)
conf_matrix <- yardstick::conf_mat(df_factor, true_value, prediction)
conf_matrix
install.packages("cvms")
conf_matrix <- cvms::confusion_matrix(targets = df_factor$true_value, predictions = df$prediction)
conf_matrix <- cvms::confusion_matrix(targets = df_factor$true_value, predictions = df_factor$prediction)
p2 <- plot_confusion_matrix(conf_mat$`Confusion Matrix`[[1]],
add_sums = TRUE)
p2 <- cvms::plot_confusion_matrix(conf_mat$`Confusion Matrix`[[1]],
add_sums = TRUE)
p2 <- cvms::plot_confusion_matrix(conf_matrix$`Confusion Matrix`[[1]],
add_sums = TRUE)
ggplotly(p2)
cvms::plot_confusion_matrix(conf_matrix$`Confusion Matrix`[[1]],
add_sums = TRUE)
cvms::plot_confusion_matrix(conf_matrix$`Confusion Matrix`[[1]])
conf_matrix
rm(list = ls())
library(flexdashboard)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(rstudioapi)
load("~/crop-classification-accuracy/processed_data/df.RDS")
df
unique(true_value)
unique(df$true_value)
df %>%
mutate(true_value = case_when(true_value %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
true_value %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
true_value %in% c("Bean", "Lentil", "Chikcpea") ~ "BLC"))
df %>%
mutate(true_value = case_when(true_value %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
true_value %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
true_value %in% c("Bean", "Lentil", "Chikcpea") ~ "BLC",
TRUE ~ true_value))
df %>%
mutate(true_value = case_when(true_value %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
true_value %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
true_value %in% c("Bean", "Lentil", "Chikcpea") ~ "BLC",
TRUE ~ true_value)) %>%
mutate(prediction = case_when(prediction %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
prediction %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
prediction %in% c("Bean", "Lentil", "Chikcpea") ~ "BLC",
TRUE ~ prediction))
df <- df %>%
mutate(true_value = case_when(true_value %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
true_value %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
true_value %in% c("Bean", "Lentil", "Chikcpea") ~ "BLC",
TRUE ~ true_value)) %>%
mutate(prediction = case_when(prediction %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
prediction %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
prediction %in% c("Bean", "Lentil", "Chikcpea") ~ "BLC",
TRUE ~ prediction))
unique_cities = df$city_name_eng %>% unique
unique_crops = df$prediction %>% unique
acc_df <- tibble(city = unique_crops, sensitivity = NA, precision = NA)
acc_df$precision = map_dbl(1:length(unique_crops), .f = function(i){
x <- df %>%
filter(prediction == unique_crops[i])
true_preds <- x %>%
filter(prediction == true_value) %>%
nrow()
n <- nrow(x)
acc <- true_preds/n
acc})
acc_df$sensitivity = map_dbl(1:length(unique_crops), .f = function(i){
x <- df %>%
filter(true_value == unique_crops[i])
true_preds <- x %>%
filter(prediction == true_value) %>%
nrow()
n <- nrow(x)
acc <- true_preds/n
acc})
acc_df <- acc_df %>%
mutate(f_score = (2*precision*sensitivity)/(precision+sensitivity))
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 0.75, width = 0.35)+
theme_minimal()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_calc()+
labs(y = "Accuracy",
x = "",
title = "")
ggplotly(p1)
df <- df %>%
mutate(true_value = case_when(true_value %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
true_value %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
true_value %in% c("Bean", "Lentil", "Chickpea") ~ "BLC",
TRUE ~ true_value)) %>%
mutate(prediction = case_when(prediction %in% c("Tomato", "Pepper", "Potato") ~ "TPP",
prediction %in% c("Squash", "Watermelon", "Melon") ~ "SWM",
prediction %in% c("Bean", "Lentil", "Chickpea") ~ "BLC",
TRUE ~ prediction))
unique_cities = df$city_name_eng %>% unique
unique_crops = df$prediction %>% unique
acc_df <- tibble(city = unique_crops, sensitivity = NA, precision = NA)
acc_df$precision = map_dbl(1:length(unique_crops), .f = function(i){
x <- df %>%
filter(prediction == unique_crops[i])
true_preds <- x %>%
filter(prediction == true_value) %>%
nrow()
n <- nrow(x)
acc <- true_preds/n
acc})
acc_df$sensitivity = map_dbl(1:length(unique_crops), .f = function(i){
x <- df %>%
filter(true_value == unique_crops[i])
true_preds <- x %>%
filter(prediction == true_value) %>%
nrow()
n <- nrow(x)
acc <- true_preds/n
acc})
acc_df <- acc_df %>%
mutate(f_score = (2*precision*sensitivity)/(precision+sensitivity))
p1 <- acc_df %>%
mutate(high = ifelse(f_score > 0.75, "High Accuracy", "Low Accuracy")) %>%
ggplot(aes(x = reorder(city, f_score), y = f_score, fill = high))+
geom_col(show.legend = NULL, alpha = 0.75, width = 0.35)+
theme_minimal()+
coord_flip()+
scale_y_continuous(label = scales::percent)+
facet_wrap(~high, scales = "free")+
scale_fill_calc()+
labs(y = "Accuracy",
x = "",
title = "")
ggplotly(p1)
ss <- df %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
count(true_value, sort = TRUE) %>%
ggplot(aes(x = reorder(true_value, n), y = n))+
geom_col(show.legend = NULL, width = 0.4, alpha = 0.8, fill = "steelblue")+
theme_pander()+
coord_flip()+
labs(y = "Sample Size",
x = "",
title = "")
ggplotly(ss)
library(RColorBrewer)
n <- length(unique_crops)
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
graph <- df %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")) %>%
count(true_value, sort = TRUE) %>%
left_join(acc_df %>%
rename(true_value = city) %>%
filter(!true_value %in% c("Agricultural_Soil", "Other", "NotField")),
by = "true_value") %>%
ggplot(aes(x = log(n), y = f_score)) +
geom_point(
aes(x = log(n),
y = f_score,
color = true_value),
show.legend = NULL,
alpha = 1,
size = 2
) +
geom_ribbon(stat='smooth', method = "glm", se=TRUE, alpha=0.05) +
geom_line(stat='smooth', method = "glm", alpha=1, color = "steelblue")+
theme_classic() +
scale_color_manual(values = col_vector)+
labs(y = "Accuracy",
x = "Log Sample Size",
title = "")
ggplotly(graph)
rm(list = ls())
library(flexdashboard)
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(rstudioapi)
load("~/crop-classification-accuracy/processed_data/df.RDS")
library(caret)
df
df %>% select(true_value) %>% unique
library(flexdashboard)
library(tidyverse)
library(ggplot2)
library(plotly)
library(ggthemes)
library(rstudioapi)
